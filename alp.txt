import math

def alpha_beta_pruning(depth, node_index, maximizing_player, values,
                       alpha, beta, max_depth):
    if depth == max_depth:
        return values[node_index]

    if maximizing_player:
        max_eval = -math.inf
        for i in range(2):  # Assume binary tree
            eval = alpha_beta_pruning(depth + 1, node_index * 2 + i, False,
                                      values, alpha, beta, max_depth)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cutoff
        return max_eval
    else:
        min_eval = math.inf
        for i in range(2):  # Assume binary tree
            eval = alpha_beta_pruning(depth + 1, node_index * 2 + i, True,
                                      values, alpha, beta, max_depth)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Alpha cutoff
        return min_eval


# Example usage with a sample game tree (binary tree)
if __name__ == "__main__":
    # Sample tree (depth = 3 â†’ 8 leaf nodes)
    # Tree values at the leaf nodes:
    values = [3, 5, 6, 9, 1, 2, 0, -1]

    max_depth = 3  # Depth of the tree
    result = alpha_beta_pruning(0, 0, True, values, -math.inf, math.inf,
                                max_depth)

    print("Optimal value (with Alpha-Beta Pruning):", result)